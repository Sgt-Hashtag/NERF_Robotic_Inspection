#!/usr/bin/env python

# SCsub
import os

from pathlib import Path

Import('env')

ros_distro = "humble"
cpp_version = "-std=c++17"

ros_dir = "/opt/ros/" + ros_distro


def getSubDirs(base_path: str, with_base_path: bool = True):
    if not base_path.endswith("/"):
        base_path += "/"
    sub_dirs = [name for name in os.listdir(base_path) if os.path.isdir(base_path + name)]
    if with_base_path:
        sub_dirs = [f"{base_path}/{name}" for name in sub_dirs]
    return sub_dirs


def getLibNames(base_path: str):
    if not base_path.endswith("/"):
        base_path += "/"
    lib_dirs = [
        Path(name).name
        for name in os.listdir(base_path)
        if os.path.isfile(base_path + name)
        if name.endswith(".so") or name.endswith(".a")
    ]
    return lib_dirs

ros_includes = getSubDirs(ros_dir + "/include")
ros_lib_path = ros_dir + "/lib"
ros_libs = getLibNames(ros_lib_path)

# Add all cpp files to the build
env.add_source_files(env.modules_sources, "src/demos/*.cpp")
env.add_source_files(env.modules_sources, "*.cpp")

# These paths are relative to /modules/ros if they are not absolute
env.Append(CPPPATH=["include"] + ros_includes)

# LIBPATH and LIBS need to be set on the real "env" (not the clone)
# to link the specified libraries to the Godot executable.

# This is a path relative to /modules where your .a libraries reside.
# If you are compiling the module externally (not in the godot source tree),
# these will need to be full paths.
env.Append(LIBPATH=[ros_lib_path])

# ROS needs c++ version compilier flag
env.Append(CCFLAGS=[cpp_version])

# Check with the documentation of the external library to see which library
# files should be included/linked.
env.Append(LIBS=ros_libs)
